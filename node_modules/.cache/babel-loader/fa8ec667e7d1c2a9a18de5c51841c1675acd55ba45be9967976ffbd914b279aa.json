{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Atharv\\\\Desktop\\\\Web_Dev\\\\React Course Udemy\\\\01-starting-setup\\\\src\\\\components\\\\ExpenseItem.js\";\nimport \"./ExpenseItem.css\";\nimport ExpenseDate from \"./ExpenseDate\";\nimport Card from \"./Card\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExpenseItem(props) {\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"expense-item\",\n    children: [/*#__PURE__*/_jsxDEV(ExpenseDate, {\n      date: props.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-item__description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-item__price\",\n        children: [\"$\", props.amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \" Change Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n_c = ExpenseItem;\nexport default ExpenseItem;\n\n// to ISo Strign is used as date is object and not a string\n\n// on other hand I am sending title date and amount and so on this side I have to use similar names but say props.passed_data\n//  and recevivve props as parameter for function props is just a sword we can use any name here but convention is to use props\n\n// To create a wrapper component we can create a diffrent compoent and use us like a dic to encapsulate \n// the conetnt in between \nvar _c;\n$RefreshReg$(_c, \"ExpenseItem\");","map":{"version":3,"names":["ExpenseDate","Card","useState","ExpenseItem","props","date","title","amount"],"sources":["C:/Users/Atharv/Desktop/Web_Dev/React Course Udemy/01-starting-setup/src/components/ExpenseItem.js"],"sourcesContent":["import \"./ExpenseItem.css\";\r\nimport ExpenseDate from \"./ExpenseDate\";\r\nimport Card from \"./Card\";\r\n\r\nimport { useState } from \"react\";\r\n\r\nfunction ExpenseItem(props) {\r\n\r\n  return (\r\n    <Card className=\"expense-item\">\r\n      <ExpenseDate date={props.date} />\r\n      <div className=\"expense-item__description\">\r\n        <h2>{props.title}</h2>\r\n        <div className=\"expense-item__price\">${props.amount}</div>\r\n        <button > Change Title</button>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem;\r\n\r\n// to ISo Strign is used as date is object and not a string\r\n\r\n// on other hand I am sending title date and amount and so on this side I have to use similar names but say props.passed_data\r\n//  and recevivve props as parameter for function props is just a sword we can use any name here but convention is to use props\r\n\r\n// To create a wrapper component we can create a diffrent compoent and use us like a dic to encapsulate \r\n// the conetnt in between "],"mappings":";AAAA,OAAO,mBAAmB;AAC1B,OAAOA,WAAW,MAAM,eAAe;AACvC,OAAOC,IAAI,MAAM,QAAQ;AAEzB,SAASC,QAAQ,QAAQ,OAAO;AAAC;AAEjC,SAASC,WAAW,CAACC,KAAK,EAAE;EAE1B,oBACE,QAAC,IAAI;IAAC,SAAS,EAAC,cAAc;IAAA,wBAC5B,QAAC,WAAW;MAAC,IAAI,EAAEA,KAAK,CAACC;IAAK;MAAA;MAAA;MAAA;IAAA,QAAG,eACjC;MAAK,SAAS,EAAC,2BAA2B;MAAA,wBACxC;QAAA,UAAKD,KAAK,CAACE;MAAK;QAAA;QAAA;QAAA;MAAA,QAAM,eACtB;QAAK,SAAS,EAAC,qBAAqB;QAAA,gBAAGF,KAAK,CAACG,MAAM;MAAA;QAAA;QAAA;QAAA;MAAA,QAAO,eAC1D;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAA+B;IAAA;MAAA;MAAA;MAAA;IAAA,QAC3B;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEX;AAAC,KAZQJ,WAAW;AAcpB,eAAeA,WAAW;;AAE1B;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}